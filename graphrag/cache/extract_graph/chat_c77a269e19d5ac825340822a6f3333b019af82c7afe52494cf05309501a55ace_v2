{"result": {"id": "chatcmpl-BpSo7YcqgP5C0Q3PDzvdQvdetx1tf", "choices": [{"finish_reason": "stop", "index": 0, "logprobs": null, "message": {"content": "(\"entity\"<|>CHROMADBVECTORMEMORY<|>MEMORY_STORE<|>A memory store that uses a vector database to store and retrieve information, supporting persistence and similarity-based retrieval)\n##\n(\"entity\"<|>SENTENCETRANSFORMEREMBEDDINGFUNCTIONCONFIG<|>CONFIGURATION<|>A configuration class for the SentenceTransformer embedding function used by the ChromaDBVectorMemory store, specifying the model and its parameters)\n##\n(\"entity\"<|>MEMORYCONTENT<|>COMPONENT<|>A component representing the content to be stored in memory, including attributes like content, MIME type, and metadata)\n##\n(\"entity\"<|>MEMORYMIMETYPE<|>COMPONENT<|>A component specifying the MIME type of the memory content, such as TEXT)\n##\n(\"entity\"<|>OPENAICHATCOMPLETIONCLIENT<|>MODEL_CLIENT<|>A model client for interacting with OpenAI's GPT-4 model, used for generating responses or performing tasks)\n##\n(\"entity\"<|>ASSISTANTAGENT<|>AGENT<|>An agent created to assist with tasks, leveraging memory stores, tools, and model clients for enhanced functionality)\n##\n(\"entity\"<|>CONSOLE<|>COMPONENT<|>A component used to display or stream the output of an agent's tasks in a user interface)\n##\n(\"entity\"<|>SIMPLEDOCUMENTINDEXER<|>COMPONENT<|>A basic document indexer for AutoGen Memory, responsible for loading, chunking, and indexing documents into memory)\n##\n(\"entity\"<|>PERSISTENTCHROMADBVECTORMEMORYCONFIG<|>CONFIGURATION<|>A configuration class for persistent storage of ChromaDBVectorMemory, including parameters like collection name, persistence path, and similarity thresholds)\n##\n(\"entity\"<|>RAG_AGENT<|>WORKFLOW<|>A Retrieval Augmented Generation (RAG) workflow that combines document indexing and retrieval to enhance AI system capabilities)\n##\n(\"relationship\"<|>CHROMADBVECTORMEMORY<|>SENTENCETRANSFORMEREMBEDDINGFUNCTIONCONFIG<|>The ChromaDBVectorMemory store uses the SentenceTransformerEmbeddingFunctionConfig for embedding functions<|>8)\n##\n(\"relationship\"<|>CHROMADBVECTORMEMORY<|>MEMORYCONTENT<|>The ChromaDBVectorMemory store stores MemoryContent, which includes user preferences, document chunks, and other data<|>9)\n##\n(\"relationship\"<|>MEMORYCONTENT<|>MEMORYMIMETYPE<|>MemoryContent specifies its MIME type using MemoryMimeType, such as TEXT<|>7)\n##\n(\"relationship\"<|>ASSISTANTAGENT<|>CHROMADBVECTORMEMORY<|>The AssistantAgent uses the ChromaDBVectorMemory store to manage and retrieve memory<|>9)\n##\n(\"relationship\"<|>ASSISTANTAGENT<|>OPENAICHATCOMPLETIONCLIENT<|>The AssistantAgent uses the OpenAIChatCompletionClient for generating responses and performing tasks<|>9)\n##\n(\"relationship\"<|>ASSISTANTAGENT<|>CONSOLE<|>The AssistantAgent streams its output to the Console component for user interaction<|>7)\n##\n(\"relationship\"<|>SIMPLEDOCUMENTINDEXER<|>CHROMADBVECTORMEMORY<|>The SimpleDocumentIndexer indexes documents into the ChromaDBVectorMemory store<|>8)\n##\n(\"relationship\"<|>SIMPLEDOCUMENTINDEXER<|>MEMORYCONTENT<|>The SimpleDocumentIndexer creates MemoryContent objects to store document chunks in memory<|>8)\n##\n(\"relationship\"<|>PERSISTENTCHROMADBVECTORMEMORYCONFIG<|>CHROMADBVECTORMEMORY<|>The ChromaDBVectorMemory store is configured for persistence using PersistentChromaDBVectorMemoryConfig<|>9)\n##\n(\"relationship\"<|>RAG_AGENT<|>SIMPLEDOCUMENTINDEXER<|>The RAG Agent workflow uses the SimpleDocumentIndexer to index documents into memory<|>8)\n##\n(\"relationship\"<|>RAG_AGENT<|>CHROMADBVECTORMEMORY<|>The RAG Agent workflow uses the ChromaDBVectorMemory store for document retrieval during runtime<|>9)\n##\n(\"relationship\"<|>RAG_AGENT<|>ASSISTANTAGENT<|>The RAG Agent workflow integrates the AssistantAgent to handle tasks and interact with memory and tools<|>8)\n<|COMPLETE|>", "refusal": null, "role": "assistant", "annotations": [], "audio": null, "function_call": null, "tool_calls": null}, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "protected_material_code": {"filtered": false, "detected": false}, "protected_material_text": {"filtered": false, "detected": false}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "created": 1751605163, "model": "gpt-4o-2024-11-20", "object": "chat.completion", "service_tier": null, "system_fingerprint": "fp_ee1d74bde0", "usage": {"completion_tokens": 975, "prompt_tokens": 3949, "total_tokens": 4924, "completion_tokens_details": {"accepted_prediction_tokens": 0, "audio_tokens": 0, "reasoning_tokens": 0, "rejected_prediction_tokens": 0}, "prompt_tokens_details": {"audio_tokens": 0, "cached_tokens": 2560}}, "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "jailbreak": {"filtered": false, "detected": false}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}]}, "input": {"messages": [{"content": "\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n\n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [agent, memory_store, embedding_function, configuration, component, tool, message, event, termination_condition, subscription, task, model_client, reasoning_model, context, workflow]\n- entity_description: Comprehensive description of the entity's attributes and activities\nFormat each entity as (\"entity\"<|><entity_name><|><entity_type><|><entity_description>)\n\n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: an integer score between 1 to 10, indicating strength of the relationship between the source entity and target entity\nFormat each relationship as (\"relationship\"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n\n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n\n4. If you have to translate into English, just translate the descriptions, nothing else!\n\n5. When finished, output <|COMPLETE|>.\n\n-Examples-\n######################\n\nExample 1:\n\nentity_types: [agent, memory_store, embedding_function, configuration, component, tool, message, event, termination_condition, subscription, task, model_client, reasoning_model, context, workflow]\ntext:\n, you will need to overload the `add`, `query` and `update_context` methods to implement the desired functionality and pass the memory store to your agent.\n\nCurrently the following example memory stores are available as part of the `autogen_ext` extensions package.\n\n- `autogen_ext.memory.chromadb.ChromaDBVectorMemory`: A memory store that uses a vector database to store and retrieve information.\n- `autogen_ext.memory.chromadb.SentenceTransformerEmbeddingFunctionConfig`: A configuration class for the SentenceTransformer embedding function used by the ChromaDBVectorMemory store. Note that other embedding functions such as `autogen_ext.memory.openai.OpenAIEmbeddingFunctionConfig` can also be used with the ChromaDBVectorMemory store.\n\n```python\nimport tempfile\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.ui import Console\nfrom autogen_core.memory import MemoryContent, MemoryMimeType\nfrom autogen_ext.memory.chromadb import (\n    ChromaDBVectorMemory,\n    PersistentChromaDBVectorMemoryConfig,\n    SentenceTransformerEmbeddingFunctionConfig,\n)\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\n# Use a temporary directory for ChromaDB persistence\nwith tempfile.TemporaryDirectory() as tmpdir:\n    chroma_user_memory = ChromaDBVectorMemory(\n        config=PersistentChromaDBVectorMemoryConfig(\n            collection_name=\"preferences\",\n            persistence_path=tmpdir,  # Use the temp directory here\n            k=2,  # Return top k results\n            score_threshold=0.4,  # Minimum similarity score\n            embedding_function_config=SentenceTransformerEmbeddingFunctionConfig(\n                model_name=\"all-MiniLM-L6-v2\"  # Use default model for testing\n            ),\n        )\n    )\n    # Add user preferences to memory\n    await chroma_user_memory.add(\n        MemoryContent(\n            content=\"The weather should be in metric units\",\n            mime_type=MemoryMimeType.TEXT,\n            metadata={\"category\": \"preferences\", \"type\": \"units\"},\n        )\n    )\n\n    await chroma_user_memory.add(\n        MemoryContent(\n            content=\"Meal recipe must be vegan\",\n            mime_type=MemoryMimeType.TEXT,\n            metadata={\"category\": \"preferences\", \"type\": \"dietary\"},\n        )\n    )\n\n    model_client = OpenAIChatCompletionClient(\n        model=\"gpt-4o\",\n    )\n\n    # Create assistant agent with\n------------------------\noutput:\n(\"entity\"<|>ADD<|>TOOL<|>The `add` method is used to add content to the memory store, such as user preferences or other data)\n##\n(\"entity\"<|>QUERY<|>TOOL<|>The `query` method is used to retrieve information from the memory store based on specific criteria or similarity scores)\n##\n(\"entity\"<|>UPDATE_CONTEXT<|>TOOL<|>The `update_context` method is used to modify or update the context of the memory store to reflect new information or changes)\n##\n(\"entity\"<|>CHROMADBVECTORMEMORY<|>MEMORY_STORE<|>A memory store that uses a vector database to store and retrieve information, part of the `autogen_ext` extensions package)\n##\n(\"entity\"<|>SENTENCETRANSFORMEREMBEDDINGFUNCTIONCONFIG<|>CONFIGURATION<|>A configuration class for the SentenceTransformer embedding function used by the ChromaDBVectorMemory store, specifying the model and its parameters)\n##\n(\"entity\"<|>OPENAIEMBEDDINGFUNCTIONCONFIG<|>CONFIGURATION<|>An alternative embedding function configuration that can also be used with the ChromaDBVectorMemory store)\n##\n(\"entity\"<|>PERSISTENTCHROMADBVECTORMEMORYCONFIG<|>CONFIGURATION<|>A configuration class for persistent storage of ChromaDBVectorMemory, including parameters like collection name, persistence path, and similarity thresholds)\n##\n(\"entity\"<|>MEMORYCONTENT<|>COMPONENT<|>A component representing the content to be stored in memory, including attributes like content, MIME type, and metadata)\n##\n(\"entity\"<|>MEMORYMIMETYPE<|>COMPONENT<|>A component specifying the MIME type of the memory content, such as TEXT)\n##\n(\"entity\"<|>OPENAICHATCOMPLETIONCLIENT<|>MODEL_CLIENT<|>A model client for interacting with OpenAI's GPT-4 model, used for generating responses or performing tasks)\n##\n(\"entity\"<|>ASSISTANTAGENT<|>AGENT<|>An agent created to assist with tasks, leveraging memory stores and model clients for enhanced functionality)\n##\n(\"entity\"<|>TEMPFILE<|>COMPONENT<|>A component used to create temporary directories for storing persistent memory data during runtime)\n##\n(\"relationship\"<|>CHROMADBVECTORMEMORY<|>SENTENCETRANSFORMEREMBEDDINGFUNCTIONCONFIG<|>The ChromaDBVectorMemory store uses the SentenceTransformerEmbeddingFunctionConfig for embedding functions<|>8)\n##\n(\"relationship\"<|>CHROMADBVECTORMEMORY<|>PERSISTENTCHROMADBVECTORMEMORYCONFIG<|>The ChromaDBVectorMemory store is configured for persistence using PersistentChromaDBVectorMemoryConfig<|>9)\n##\n(\"relationship\"<|>CHROMADBVECTORMEMORY<|>MEMORYCONTENT<|>The ChromaDBVectorMemory store stores MemoryContent, which includes user preferences and other data<|>8)\n##\n(\"relationship\"<|>MEMORYCONTENT<|>MEMORYMIMETYPE<|>MemoryContent specifies its MIME type using MemoryMimeType, such as TEXT<|>7)\n##\n(\"relationship\"<|>ASSISTANTAGENT<|>CHROMADBVECTORMEMORY<|>The AssistantAgent uses the ChromaDBVectorMemory store to manage and retrieve memory<|>9)\n##\n(\"relationship\"<|>ASSISTANTAGENT<|>OPENAICHATCOMPLETIONCLIENT<|>The AssistantAgent uses the OpenAIChatCompletionClient for generating responses and performing tasks<|>9)\n##\n(\"relationship\"<|>TEMPFILE<|>PERSISTENTCHROMADBVECTORMEMORYCONFIG<|>Tempfile is used to create a temporary directory for the persistence path in PersistentChromaDBVectorMemoryConfig<|>6)\n##\n(\"relationship\"<|>ADD<|>CHROMADBVECTORMEMORY<|>The `add` method is used to add data to the ChromaDBVectorMemory store<|>8)\n##\n(\"relationship\"<|>QUERY<|>CHROMADBVECTORMEMORY<|>The `query` method is used to retrieve data from the ChromaDBVectorMemory store<|>8)\n##\n(\"relationship\"<|>UPDATE_CONTEXT<|>CHROMADBVECTORMEMORY<|>The `update_context` method is used to modify the context of the ChromaDBVectorMemory store<|>7)\n<|COMPLETE|>\n#############################\n\n\nExample 2:\n\nentity_types: [agent, memory_store, embedding_function, configuration, component, tool, message, event, termination_condition, subscription, task, model_client, reasoning_model, context, workflow]\ntext:\n on actions *within* the agent itself, and belong to subclasses of the base class `BaseAgentEvent`.\n\nExamples of these include `ToolCallRequestEvent`, which indicates that a request was made to call a tool, and `ToolCallExecutionEvent`, which contains the results of tool calls.\n\nTypically, events are created by the agent itself and are contained in the `inner_messages` field of the `Response` returned from `on_messages`. If you are building a custom agent and have events that you want to communicate to other entities (e.g., a UI), you can include these in the `inner_messages` field of the `Response`. We will show examples of this in Custom Agents.\n\nYou can read about the full set of messages supported in AgentChat in the `messages` module.\n\n## Custom Message Types\n\nYou can create custom message types by subclassing the base class `BaseChatMessage` or `BaseAgentEvent`. This allows you to define your own message formats and behaviors, tailored to your application. Custom message types are useful when you write custom agents.\n\n------------------------\noutput:\n(\"entity\"<|>BASEAGENTEVENT<|>event<|>Base class for events within the agent itself, used to define specific types of agent-related events)\n##\n(\"entity\"<|>TOOLCALLREQUESTEVENT<|>event<|>An event indicating that a request was made to call a tool)\n##\n(\"entity\"<|>TOOLCALLEXECUTIONEVENT<|>event<|>An event containing the results of tool calls)\n##\n(\"entity\"<|>INNER_MESSAGES<|>message<|>Field in the `Response` object that contains events created by the agent itself, such as tool call events)\n##\n(\"entity\"<|>RESPONSE<|>message<|>Object returned from `on_messages` that contains fields like `inner_messages` to communicate events)\n##\n(\"entity\"<|>BASECHATMESSAGE<|>message<|>Base class for creating custom message types tailored to specific applications)\n##\n(\"entity\"<|>AGENTCHAT<|>component<|>Module that supports a full set of messages for agent communication)\n##\n(\"entity\"<|>CUSTOM AGENTS<|>agent<|>Agents that are built with custom events and message types to communicate with other entities, such as UIs)\n##\n(\"relationship\"<|>TOOLCALLREQUESTEVENT<|>BASEAGENTEVENT<|>ToolCallRequestEvent is a subclass of BaseAgentEvent, representing a specific type of event<|>8)\n##\n(\"relationship\"<|>TOOLCALLEXECUTIONEVENT<|>BASEAGENTEVENT<|>ToolCallExecutionEvent is a subclass of BaseAgentEvent, representing a specific type of event<|>8)\n##\n(\"relationship\"<|>INNER_MESSAGES<|>RESPONSE<|>Inner_messages is a field in the Response object that contains events created by the agent<|>9)\n##\n(\"relationship\"<|>CUSTOM AGENTS<|>INNER_MESSAGES<|>Custom agents can include events in the inner_messages field to communicate with other entities<|>7)\n##\n(\"relationship\"<|>BASECHATMESSAGE<|>CUSTOM AGENTS<|>Custom agents can use BaseChatMessage to define their own message formats and behaviors<|>8)\n##\n(\"relationship\"<|>AGENTCHAT<|>RESPONSE<|>AgentChat supports the full set of messages, including those contained in the Response object<|>6)\n<|COMPLETE|>\n#############################\n\n\n\n-Real Data-\n######################\nentity_types: [agent, memory_store, embedding_function, configuration, component, tool, message, event, termination_condition, subscription, task, model_client, reasoning_model, context, workflow]\ntext: directory here\n            k=2,  # Return top k results\n            score_threshold=0.4,  # Minimum similarity score\n            embedding_function_config=SentenceTransformerEmbeddingFunctionConfig(\n                model_name=\"all-MiniLM-L6-v2\"  # Use default model for testing\n            ),\n        )\n    )\n    # Add user preferences to memory\n    await chroma_user_memory.add(\n        MemoryContent(\n            content=\"The weather should be in metric units\",\n            mime_type=MemoryMimeType.TEXT,\n            metadata={\"category\": \"preferences\", \"type\": \"units\"},\n        )\n    )\n\n    await chroma_user_memory.add(\n        MemoryContent(\n            content=\"Meal recipe must be vegan\",\n            mime_type=MemoryMimeType.TEXT,\n            metadata={\"category\": \"preferences\", \"type\": \"dietary\"},\n        )\n    )\n\n    model_client = OpenAIChatCompletionClient(\n        model=\"gpt-4o\",\n    )\n\n    # Create assistant agent with ChromaDB memory\n    assistant_agent = AssistantAgent(\n        name=\"assistant_agent\",\n        model_client=model_client,\n        tools=[get_weather],\n        memory=[chroma_user_memory],\n    )\n\n    stream = assistant_agent.run_stream(task=\"What is the weather in New York?\")\n    await Console(stream)\n\n    await model_client.close()\n    await chroma_user_memory.close()\n```\n\nNote that you can also serialize the ChromaDBVectorMemory and save it to disk.\n\n```python\nchroma_user_memory.dump_component().model_dump_json()\n```\n\n## RAG Agent: Putting It All Together\n\nThe RAG (Retrieval Augmented Generation) pattern which is common in building AI systems encompasses two distinct phases:\n\n1. **Indexing**: Loading documents, chunking them, and storing them in a vector database\n2. **Retrieval**: Finding and using relevant chunks during conversation runtime\n\nIn our previous examples, we manually added items to memory and passed them to our agents. In practice, the indexing process is usually automated and based on much larger document sources like product documentation, internal files, or knowledge bases.\n\n> **Note**: The quality of a RAG system is dependent on the quality of the chunking and retrieval process (models, embeddings, etc.). You may need to experiment with more advanced chunking and retrieval models to get the best results.\n\n### Building a Simple RAG Agent\n\nTo begin, let's create a simple document indexer that we will used to load documents, chunk them, and store them in a ChromaDBVectorMemory memory store.\n\n```python\nimport re\nfrom typing import List\n\nimport aiofiles\nimport aiohttp\nfrom autogen_core.memory import Memory, MemoryContent, MemoryMimeType\n\n\nclass SimpleDocumentIndexer:\n    \"\"\"Basic document indexer for AutoGen Memory.\"\"\"\n\n    def __init__(self, memory: Memory, chunk_size: int = 1500) -> None:\n        self.memory = memory\n        self.chunk_size = chunk_size\n\n    async def _fetch_content(self, source: str) -> str:\n        \"\"\"Fetch content from URL or file.\"\"\"\n        if source.startswith((\"http://\", \"https://\")):\n            async with aiohttp.ClientSession() as session:\n                async with session.get(source) as response:\n                    return await response.text()\n        else:\n            async with aiofiles.open(source, \"r\", encoding=\"utf-8\") as f:\n                return await f.read()\n\n    def _strip_html(self, text: str) -> str:\n        \"\"\"Remove HTML tags and normalize whitespace.\"\"\"\n        text = re.sub(r\"<[^>]*>\", \" \", text)\n        text = re.sub(r\"\\s+\", \" \", text)\n        return text.strip()\n\n    def _split_text(self, text: str) -> List[str]:\n        \"\"\"Split text into fixed-size chunks.\"\"\"\n        chunks: list[str] = []\n        # Just split text into fixed-size chunks\n        for i in range(0, len(text), self.chunk_size):\n            chunk = text[i : i + self.chunk_size]\n            chunks.append(chunk.strip())\n        return chunks\n\n    async def index_documents(self, sources: List[str]) -> int:\n        \"\"\"Index documents into memory.\"\"\"\n        total_chunks = 0\n\n        for source in sources:\n            try:\n                content = await self._fetch_content(source)\n\n                # Strip HTML if content appears to be HTML\n                if \"<\" in content and \">\" in content:\n                    content = self._strip_html(content)\n\n                chunks = self._split_text(content)\n\n                for i, chunk in enumerate(chunks):\n                    await self.memory.add(\n                        MemoryContent(\n                            content=chunk, mime_type=MemoryMimeType.TEXT, metadata={\"source\": source, \"chunk_index\": i}\n                        )\n                    )\n\n                total_chunks += len(chunks)\n\n            except Exception as e:\n                print(f\"Error indexing {source}: {str(e)}\")\n\n        return total_chunks\n```\n\nNow let's use our indexer with ChromaDBVectorMemory to build a complete RAG agent:\n\n```python\nimport os\nfrom pathlib import Path\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.ui import Console\nfrom autogen_ext.memory.chromadb import ChromaDBVectorMemory, PersistentChromaDBVectorMemoryConfig\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\n# Initialize vector memory\nrag_memory = ChromaDBVectorMemory(\n    config=PersistentChromaDBVectorMemoryConfig(\n        collection_name=\"autogen_docs\",\n        persistence_path=os.path.join(str(Path.home()), \".chromadb_autogen\"),\n        k=3,  # Return top 3 results\n        score_threshold=0.4,  # Minimum similarity score\n    )\n)\n\nawait rag_memory.clear()  # Clear existing memory\n\n\n# Index AutoGen documentation\nasync def index_autogen_docs() -> None:\n    indexer\n######################\noutput:", "role": "user"}], "parameters": {"model": "gpt-4o", "frequency_penalty": 0.0, "max_tokens": null, "n": 1, "presence_penalty": 0.0, "temperature": 0.0, "top_p": 1.0}}, "key": "chat_c77a269e19d5ac825340822a6f3333b019af82c7afe52494cf05309501a55ace_v2"}